# don't send the nginx version number in error pages and Server header
server_tokens off;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

# The Referrer-Policy HTTP header governs which referrer information, sent in the Referer header, should be included
# with requests made.
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
add_header Referrer-Policy "same-origin";

# with Content Security Policy (CSP) enabled(and a browser that supports it (http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
#
# Generated via `$ ember csp-headers --environment production`
add_header Content-Security-Policy "default-src 'none'; base-uri 'none'; script-src 'self' 'unsafe-eval'; frame-src 'self' https://*.bitski.com; style-src 'self' 'unsafe-inline'; img-src 'self' https://*.bitski.com https://cdn.bitskistatic.com; font-src 'self' https://*.bitski.com https://cdn.bitskistatic.com; form-action https://*.bitski.com; media-src ; child-src ; connect-src 'self' https://*.bitski.com https://app.getsentry.com https://sentry.io;";

# The HTTP Feature-Policy header provides a mechanism to allow and deny the use of browser features in its own frame,
# and in iframes that it embeds.
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
add_header Feature-Policy "autoplay 'none';camera 'none';encrypted-media 'none';fullscreen 'none';geolocation 'none';microphone 'none';midi 'none';payment 'none';vr 'none';";

# Disable CORS
add_header Access-Control-Allow-Origin null;

# Provide quick health check
location = /health-check {
  add_header Content-Type text/plain;
  return 200 'OK';
}

location /oauth2/ {
  proxy_pass       http://127.0.0.1:4180;
  proxy_set_header Host                    $host;
  proxy_set_header X-Real-IP               $remote_addr;
  proxy_set_header X-Scheme                $scheme;
  proxy_set_header X-Auth-Request-Redirect $request_uri;
}
location = /oauth2/auth {
  proxy_pass       http://127.0.0.1:4180;
  proxy_set_header Host             $host;
  proxy_set_header X-Real-IP        $remote_addr;
  proxy_set_header X-Scheme         $scheme;
  # nginx auth_request includes headers but not body
  proxy_set_header Content-Length   "";
  proxy_pass_request_body           off;
}

# Proxy account API
# Defined as regex so it does not fall through to non-asset location below.
location /v1/ {
  auth_request /oauth2/auth;
  auth_request_set $token  $upstream_http_x_auth_request_access_token;
  proxy_set_header Authorization "Bearer $token";

  proxy_http_version 1.1;
  proxy_ssl_server_name on;
  proxy_set_header Connection "";
  proxy_set_header X-Real-IP $remote_addr;
  proxy_connect_timeout 10;
  proxy_send_timeout    10;
  proxy_read_timeout    10;
  proxy_pass http://web3-router-v2.standard.svc:8000/;
}

# Serve index.html on all paths that do not have an extension (e.g. /callback, BUT NOT /index.js, .png, etc).
location ~ ^([^.]+)$ {
    auth_request /oauth2/auth;
    error_page 401 = /oauth2/sign_in;
    
    try_files '' /index.html =404;
}
